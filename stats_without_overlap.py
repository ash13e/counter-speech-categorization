# -*- coding: utf-8 -*-
"""stats_without_overlap.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SGRvRQJslUcXB0GVs1dJuws-UjWk4HhC
"""

# all imported goods
import pandas as pd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt
import scipy.stats as stats

df = pd.read_csv('data_reply_and_user.csv')
df.info()

#extract hate posters
hate = df.iloc[:,[0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 43]]
hate = hate.dropna(subset = ['author_comment_karma'])
hate = hate.drop_duplicates(subset=['Hate_author'])
hate = hate.set_index('Hate_author')
hate.info()

#extract reply posters
reply = df.iloc[:,[24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43]]
reply = reply.dropna(subset = ['replier_comment_karma'])
reply = reply.drop_duplicates(subset=['Reply_author'])
#reply = reply.drop_duplicates()
print(reply['Reply_author'].value_counts())
reply = reply.set_index('Reply_author')
reply.info()

#checking for authors that post both replies and hate?
h2 = hate.reset_index()
h2 = h2.rename(columns={'Hate_author':'author'})
r2 = reply.reset_index()
r2 = r2.rename(columns={'Reply_author':'author'})
cross = pd.merge(h2,r2,on='author')
cross = cross.drop(["replier_comment_karma", 'log_replier_comment_karma', 'replier_link_karma', 'log_replier_link_karma',
            'replier_create_utc', 'replier_create_date', 'replier_age_of_account', 'replier_mod', 'replier_mod_subreddits',
            'replier_trophies', 'replier_Email_verified', 'replier_Year_Club', 'replier_Gilde', 'replier_Awards_Club',
            'replier_Not_Forgotten', 'replier_Reddit_Premium'], axis=1)
cross = cross.set_index('author')
cross.info()

list = (cross.reset_index())['author'].to_numpy().tolist()
hate = hate.drop(list, axis=0)
reply = reply.drop(list, axis=0)

print(len(list))
hate.info()
reply.info()

#reddit premium
rp1 = hate['author_Reddit_Premium'].value_counts().to_numpy().tolist()
rp2 = reply['replier_Reddit_Premium'].value_counts().to_numpy().tolist()
rp3 = cross['author_Reddit_Premium'].value_counts().to_numpy().tolist()
rp = pd.DataFrame({'hate':rp1, 'reply':rp2, 'both':rp3}, index=['No','Yes'],dtype='float64')
print('number of users with reddit premium')
print(rp)
rpp = rp
rpp['hate'] = rpp['hate']/8297 * 100
rpp['reply'] = rpp['reply']/14597 * 100
rpp['both'] = rpp['both']/12886 * 100
print('percentage of users with reddit premium')
print(rpp)

#mod
m1 = hate['author_mod'].value_counts().to_numpy().tolist()
m2 = reply['replier_mod'].value_counts().to_numpy().tolist()
m3 = cross['author_mod'].value_counts().to_numpy().tolist()
m = pd.DataFrame({'hate':m1, 'reply':m2, 'both':m3}, index=['No','Yes'],dtype='float64')
print('number of users that are moderators')
print(m)
mp = m
mp['hate'] = mp['hate']/8297 * 100
mp['reply'] = mp['reply']/14597 * 100
mp['both'] = mp['both']/12886 * 100
print('percentage of users that are moderators')
print(mp)

#verified email
ev1 = hate['author_Email_verified'].value_counts().to_numpy().tolist()
ev2 = reply['replier_Email_verified'].value_counts().to_numpy().tolist()
ev3 = cross['author_Email_verified'].value_counts().to_numpy().tolist()
ev = pd.DataFrame({'hate':ev1, 'reply':ev2, 'both':ev3}, index=['No','Yes'],dtype='float64')
print('number of users with verified email')
print(ev)
evp = ev
evp['hate'] = evp['hate']/8297 * 100
evp['reply'] = evp['reply']/14597 * 100
evp['both'] = evp['both']/12886 * 100
print('percentage of users with verified email')
print(evp)

#awards club
ac1 = hate['author_Awards_Club'].value_counts().to_numpy().tolist()
ac2 = reply['replier_Awards_Club'].value_counts().to_numpy().tolist()
ac3 = cross['author_Awards_Club'].value_counts().to_numpy().tolist()
ac = pd.DataFrame({'hate':ac1, 'reply':ac2, 'both':ac3}, index=['No','Yes'],dtype='float64')
print('number of users with awards club')
print(ac)
acp = ac
acp['hate'] = acp['hate']/8297 * 100
acp['reply'] = acp['reply']/14597 * 100
acp['both'] = acp['both']/12886 * 100
print('percentage of users with awards club')
print(acp)

#not forgotten
nf1 = hate['author_Not_Forgotten'].value_counts().to_numpy().tolist()
nf2 = reply['replier_Not_Forgotten'].value_counts().to_numpy().tolist()
nf3 = cross['author_Not_Forgotten'].value_counts().to_numpy().tolist()
nf = pd.DataFrame({'hate':nf1, 'reply':nf2, 'both':nf3}, index=['No','Yes'],dtype='float64')
print('number of users with not forgotten')
print(nf)
nfp = nf
nfp['hate'] = nfp['hate']/8297 * 100
nfp['reply'] = nfp['reply']/14597 * 100
nfp['both'] = nfp['both']/12886 * 100
print('percentage of users with not forgotten')
print(nfp)

hg = hate['author_Gilde'].value_counts().to_numpy().tolist()
rg = reply['replier_Gilde'].value_counts().to_numpy().tolist()
bg = cross['author_Gilde'].value_counts().to_numpy().tolist()
bg.append(0)
g = pd.DataFrame({'hate':hg, 'reply':rg, 'both': bg}, index=[1, 4, 5, 7, 6, 10], dtype='float64')
g = g.reindex([1, 4, 5, 6, 7, 10])
print('number of users with gilde')
print(g)
gp = g
gp['hate'] = gp['hate']/8297 * 100
gp['reply'] = gp['reply']/14597 * 100
gp['both'] = gp['both']/12886 * 100
print('percentage of users with gilde')
print(gp)

yc1 = hate['author_Year_Club'].value_counts().reindex([1.0, 2.0, 3.0, 4.0, 5.0, 6.0,
                                                       7.0, 8.0, 9.0, 10.0, 11.0, 12.0,
                                                       13.0, 14.0, 15.0]).to_numpy().tolist()
yc2 = reply['replier_Year_Club'].value_counts().reindex([1.0, 2.0, 3.0, 4.0, 5.0, 6.0,
                                                       7.0, 8.0, 9.0, 10.0, 11.0, 12.0,
                                                       13.0, 14.0, 15.0]).to_numpy().tolist()
yc3 = cross['author_Year_Club'].value_counts().reindex([1.0, 2.0, 3.0, 4.0, 5.0, 6.0,
                                                       7.0, 8.0, 9.0, 10.0, 11.0, 12.0,
                                                       13.0, 14.0, 15.0]).to_numpy().tolist()
yc = pd.DataFrame({'hate':yc1, 'reply':yc2, 'both':yc3}, index=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],dtype='float64')
print('number of users with years-club')
print(yc)
ycp = yc
ycp['hate'] = ycp['hate']/8297 * 100
ycp['reply'] = ycp['reply']/14597 * 100
ycp['both'] = ycp['both']/12886 * 100
print('percentage of users with years-club')
print(ycp)

sns.histplot(hate['author_age_of_account'])
plt.show()

sns.histplot(hate['author_comment_karma'])
plt.show()

sns.histplot(hate['author_link_karma'])
plt.show()

stats.mannwhitneyu(hate['author_age_of_account'], reply['replier_age_of_account'])

stats.mannwhitneyu(hate['author_comment_karma'], reply['replier_comment_karma'])

stats.mannwhitneyu(hate['author_link_karma'], reply['replier_link_karma'])

#age of account plot
ar1 = hate['author_age_of_account'].to_numpy().tolist()
ar2 = reply['replier_age_of_account'].to_numpy().tolist()
ar3 = cross['author_age_of_account'].to_numpy().tolist()
ecdfD = {'hate': ar1, 'reply': ar2, 'both': ar3}
sns.ecdfplot(data=ecdfD)
plt.title('Age of Accounts')
plt.xlabel('Age')

#age of account plot
ar1 = hate['log_author_comment_karma'].to_numpy().tolist()
ar2 = reply['log_replier_comment_karma'].to_numpy().tolist()
ar3 = cross['log_author_comment_karma'].to_numpy().tolist()
ecdfD = {'hate': ar1, 'reply': ar2, 'both': ar3}
sns.ecdfplot(data=ecdfD)
plt.title('User Comment Karmas')
plt.xlabel('Comment Karma')

#age of account plot
ar1 = hate['log_author_link_karma'].to_numpy().tolist()
ar2 = reply['log_replier_link_karma'].to_numpy().tolist()
ar3 = cross['log_author_link_karma'].to_numpy().tolist()
ecdfD = {'hate': ar1, 'reply': ar2, 'both': ar3}
sns.ecdfplot(data=ecdfD)
plt.title('User Link Karmas')
plt.xlabel('Link Karma')

hate.to_csv("hate_without_overlap.csv")
reply.to_csv("reply_without_overlap.csv")

#trying to do some more plots
# Extract relevant columns for replyId author info and conversation outcome
reply = reply.reset_index()
reply_info = reply[['Reply_author','replier_Year_Club', 'Reply_effectiveness', 'log_replier_link_karma', 'log_replier_comment_karma', 'replier_age_of_account']]
# Group by author and calculate sum of reply total, sum of hate total, and average effectiveness
reply_info_grouped = reply_info.groupby('Reply_author').agg({'replier_Year_Club': 'mean', 'Reply_effectiveness': 'mean', 'log_replier_link_karma': 'mean',
'log_replier_comment_karma': 'mean', 'replier_age_of_account': 'mean'})
reply_info_grouped.reset_index(inplace=True)  # Reset index to convert group labels back to columns

#print(reply_info_grouped['Reply_effectiveness'].value_counts())
sns.pairplot(data=reply_info_grouped, vars=['replier_age_of_account', 'replier_Year_Club', 'Reply_effectiveness'])
plt.suptitle('Pairplot of Account Age and Reply Effectiveness')
plt.show()

sns.pairplot(data=reply_info_grouped, vars=['log_replier_link_karma', 'log_replier_comment_karma', 'Reply_effectiveness'])
plt.suptitle('Pairplot of Karma and Reply Effectiveness')
plt.show()

reply_info_grouped.info()



